/*
* Generated by Wasabi. DO NOT EDIT.
* Contains:
*   - independent of program-to-instrument: long.js dependency, Wasabi loader and runtime
*   - generated from program-to-instrument: static information and low-level hooks
*/

const Long = require("./long.cjs")

/*
 * Wasabi loader (monkey-patches WebAssembly.instantiate()) and runtime (e.g., for resolving call_indirect).
 */

let Wasabi = {
  HOOK_NAMES: [
    "start",
    "if_",
    "br",
    "br_if",
    "br_table",
    "begin",
    "end",
    "nop",
    "unreachable",
    "drop",
    "select",
    "call_pre",
    "call_post",
    "return_",
    "const_",
    "unary",
    "binary",
    "load",
    "store",
    "memory_size",
    "memory_grow",
    "local",
    "global",
    "memory_fill",
    "memory_copy",
    "memory_init",
    "table_size",
    "table_copy",
    "table_init",
    "table_get",
    "table_set",
    "table_grow",
    "table_fill",
    "begin_function",
  ],

  // map a table index to a function index
  resolveTableIdx: function (tableIdx, elemIdx) {
    if (
      Wasabi.module.exports === undefined ||
      Wasabi.module.tables[tableIdx] === undefined
    ) {
      // console.warn("Wasabi: cannot resolve table index without module exports and table (possible reason: exports and table are usually not available during execution of the Wasm start function)");
      return undefined;
    }

    const resolvedFunction = Wasabi.module.tables[tableIdx].get(elemIdx);
    if (resolvedFunction === null) {
      // console.warn("Wasabi: resolving indirectly called function failed because table returned `null` at index " + tableIdx);
      return undefined;
    }

    // NOTE We want to get the _index_ of the resolved function to the analysis code, but the
    // WebAssembly API only gives us a _function object_.
    // HACK We can abuse the `.name` property of the function object to get the index.
    // See the MDN, which says the "name property is the toString() result of the function's
    // index in the wasm module".
    // https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions
    const resolvedFunctionIdx = parseInt(resolvedFunction.name);

    // However, because we inserted a bunch of imported hook functions into the module, the
    // index retrieved above is in terms of the _instrumented_ module. We want to get the
    // function index in the _original_ module however, so we adjust it here:
    if (
      resolvedFunctionIdx >= Wasabi.module.info.originalFunctionImportsCount
    ) {
      return (
        resolvedFunctionIdx - Object.keys(Wasabi.module.lowlevelHooks).length
      );
    } else {
      return resolvedFunctionIdx;
    }
  },

  // call end hooks for all "intermediate" or "implicitly ended blocks" of a branch table
  endBrTableBlocks: function (brTablesInfoIdx, brTableIdx, func) {
    const table = Wasabi.module.info.brTables[brTablesInfoIdx].table;
    const default_ = Wasabi.module.info.brTables[brTablesInfoIdx].default;
    const target =
      table[brTableIdx] === undefined ? default_ : table[brTableIdx];

    // NOTE this is a JavaScript impl of the Wasabi to_end_hook_args() function in Rust
    for (const block of target.ends) {
      const [type, begin, end, begin_if] = block;
      Wasabi.analysis.end(
        { func, instr: end },
        type,
        { func, instr: begin },
        // not undefined only for block type "else"
        begin_if === undefined ? undefined : { func, instr: begin_if }
      );
    }
  },

  module: {
    // filled at instrumentation time
    // TODO flatten info into module itself, by using Object.assign in generated code
    info: undefined,
    lowlevelHooks: undefined,
    // filled after instantiation
    exports: undefined,
    table: undefined,
  },

  // filled by user or with empty hooks (as fallback) before instantiation
  analysis: {},
};

// monkey-patch WebAssembly.instantiate() and .instantiateStreaming() to add Wasabi
{
  // NOTE even though nothing is done with their arguments, we should provide them because it speeds up in Firefox
  // maybe because this way the JIT can inline the functions???
  const defaultHooks = {
    start(location) {},
    nop(location) {},
    unreachable(location) {},
    if_(location, condition) {},
    br(location, target) {},
    br_if(location, conditionalTarget, condition) {},
    br_table(location, table, defaultTarget, tableIdx) {},
    begin(location, type) {},
    end(location, type, beginLocation, ifLocation) {},
    drop(location, value) {},
    select(location, cond, first, second) {},
    call_pre(location, targetFunc, args, indirectTableIdx) {},
    call_post(location, values) {},
    return_(location, values) {},
    const_(location, op, value) {},
    unary(location, op, input, result) {},
    binary(location, op, first, second, result) {},
    load(location, op, memarg, value) {},
    store(location, op, memarg, value) {},
    memory_size(location, memoryIdx, currentSizePages) {},
    memory_grow(location, memoryIdx, byPages, previousSizePages) {},
    local(location, op, localIndex, value) {},
    global(location, op, globalIndex, value) {},
    memory_fill(location, index, value, length) {},
    memory_copy(location, destination, source, length) {},
    memory_init(location, destination, source, length) {},
    table_size(location, currentSizeEntries) {},
    table_copy(location, destination, source, length) {},
    table_init(location, destination, source, length) {},
    table_get(location, index, value) {},
    table_set(location, index, value) {},
    table_grow(location, n, val, previusElement) {},
    table_fill(location, index, value, length) {},
    begin_function(location, args) {},
  };

  const assertInstantiationPrecondition = function () {
    if (
      Wasabi.module.info === undefined ||
      Wasabi.module.lowlevelHooks === undefined
    ) {
      throw "missing static info or low-level hooks, did you include the Wasabi-generated JavaScript file?";
    }
  };

  const importObjectWithHooks = function (importObject) {
    for (const hook of Wasabi.HOOK_NAMES) {
      if (Wasabi.analysis[hook] === undefined) {
        // console.debug("Wasabi: hook", hook, "not provided by Wasabi.analysis, I will use an empty function as a fallback");
        Wasabi.analysis[hook] = defaultHooks[hook];
      }
    }
    let importObjectWithHooks = importObject || {};
    importObjectWithHooks.__wasabi_hooks = Wasabi.module.lowlevelHooks;
    return importObjectWithHooks;
  };

  const wireInstanceExports = function (instance) {
    Wasabi.module.exports = instance.exports;
    Wasabi.module.tables = [];
    Wasabi.module.memories = [];
    Wasabi.module.globals = [];
    for (let exp in instance.exports) {
      if (Wasabi.module.info.tableExportNames.includes(exp)) {
        Wasabi.module.tables.push(instance.exports[exp]);
      }
      if (Wasabi.module.info.memoryExportNames.includes(exp)) {
        Wasabi.module.memories.push(instance.exports[exp]);
      }
      if (Wasabi.module.info.globalExportNames.includes(exp)) {
        Wasabi.module.globals.push(instance.exports[exp]);
      }
    }
    // Wasabi.module.tables = Object.fromEntries(Object.entries(instance.exports).filter(([key]) => Wasabi.module.info.tableExportNames.includes(key)));
    // Wasabi.module.memories = Object.fromEntries(Object.entries(instance.exports).filter(([key]) => Wasabi.module.info.memoryExportNames.includes(key)));
  };

  const oldInstantiate = WebAssembly.instantiate;
  WebAssembly.instantiate = (sourceBuffer, importObject) => {
    assertInstantiationPrecondition();
    const result = oldInstantiate(
      sourceBuffer,
      importObjectWithHooks(importObject)
    );
    // as soon as instance is available, save exports and table
    result.then(({ module, instance }) => {
      wireInstanceExports(instance);
    });

    WebAssembly.instantiate = oldInstantiate;
    // FIXME Due to the added imports of __wasabi functions, host code that mutates the table
    // might insert the wrong numerical index into the table.
    // We could at least detect (and warn that this changes behavior), or fix it, by wrapping
    // the exported table in a proxy object, that adapts the inserted get/set calls accordingly.

    return result;
  };

  // just fall-back to regular instantiation since Wasabi doesn't support streaming instrumentation (yet) anyway
  const oldInstantiateStreaming = WebAssembly.instantiateStreaming;
  WebAssembly.instantiateStreaming = async (source, importObject) => {
    let response = await source;
    let buffer = await response.arrayBuffer();
    return WebAssembly.instantiate(buffer, importObject);
  };

  const oldInstance = WebAssembly.Instance;
  const newInstance = function (module, importObject) {
    assertInstantiationPrecondition();
    const instance = new oldInstance(
      module,
      importObjectWithHooks(importObject)
    );
    wireInstanceExports(instance);
    return instance;
  };
  WebAssembly.Instance = newInstance;
}

Wasabi.module.info = {"functions":[{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiIiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":240},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":139},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiii","instrCount":79},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiIiiiiiiiiiiiiiiIiiiiiiiiiiiii","instrCount":158},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiIiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":469},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":652},{"type":"iii|","import":null,"export":[],"locals":"iiiii","instrCount":28},{"type":"iiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":146},{"type":"iiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiii","instrCount":121},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiii","instrCount":62},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiIiiiiiiii","instrCount":94},{"type":"i|","import":null,"export":[],"locals":"","instrCount":2},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":225},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiii","instrCount":79},{"type":"ii|","import":null,"export":[],"locals":"iiiiiii","instrCount":29},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiii","instrCount":70},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiii","instrCount":102},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiii","instrCount":46},{"type":"iiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":365},{"type":"iiiiiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":513},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiiii","instrCount":64},{"type":"ii|","import":null,"export":[],"locals":"Iiiii","instrCount":24},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":46},{"type":"iiiiiii|","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":49},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":46},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiii","instrCount":56},{"type":"i|","import":null,"export":[],"locals":"iiiiiii","instrCount":34},{"type":"i|","import":null,"export":[],"locals":"iiiiiii","instrCount":34},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiiiiiii","instrCount":57},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiiiiiii","instrCount":57},{"type":"i|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":168},{"type":"i|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":168},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiii","instrCount":103},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiii","instrCount":40},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"i|","import":null,"export":["new"],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiIiiiiiIiiiiiiiiii","instrCount":179},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiii","instrCount":89},{"type":"ii|","import":null,"export":["render"],"locals":"iiiiiiii","instrCount":41},{"type":"i|","import":null,"export":["tick"],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiIIiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":508},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiii","instrCount":67},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":595},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiiiiiii","instrCount":43},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiIiii","instrCount":48},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiii","instrCount":88},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":5},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiii","instrCount":129},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":44},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiii","instrCount":63},{"type":"iiiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiii","instrCount":107},{"type":"i|i","import":null,"export":[],"locals":"iiiiiii","instrCount":25},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiii","instrCount":72},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":7},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiii","instrCount":86},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":136},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiii","instrCount":37},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":136},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiIiiiiiIiiiIiiiiiiiiiiii","instrCount":103},{"type":"iiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":162},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiii","instrCount":91},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"","instrCount":6},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiii","instrCount":72},{"type":"i|","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|","import":null,"export":[],"locals":"","instrCount":6},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiii","instrCount":72},{"type":"i|","import":null,"export":[],"locals":"ii","instrCount":11},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiii","instrCount":41},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiii","instrCount":84},{"type":"iii|","import":null,"export":[],"locals":"iiiii","instrCount":28},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiii","instrCount":51},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiIiii","instrCount":48},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiii","instrCount":37},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":164},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiii","instrCount":68},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":142},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiii","instrCount":64},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiii","instrCount":111},{"type":"i|","import":null,"export":[],"locals":"iiiiii","instrCount":27},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiii","instrCount":112},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":52},{"type":"ii|i","import":null,"export":[],"locals":"iiii","instrCount":16},{"type":"ii|i","import":null,"export":[],"locals":"iii","instrCount":14},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiIiiiiiIiiiIiiiiiiii","instrCount":92},{"type":"iii|i","import":null,"export":[],"locals":"iiii","instrCount":17},{"type":"iii|i","import":null,"export":[],"locals":"iii","instrCount":15},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":181},{"type":"iiiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":500},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiii","instrCount":96},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":408},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiIiiiiiii","instrCount":160},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiIiiiiiii","instrCount":160},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":502},{"type":"iiii|","import":null,"export":[],"locals":"iiiiii","instrCount":34},{"type":"iiii|","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii","instrCount":502},{"type":"iiii|","import":null,"export":[],"locals":"iiiiii","instrCount":34},{"type":"ii|","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":42},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiii","instrCount":40},{"type":"iii|","import":null,"export":[],"locals":"iiiiiiiii","instrCount":40},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":8},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":8},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":8},{"type":"iiii|i","import":null,"export":[],"locals":"iiiiii","instrCount":31},{"type":"iiii|i","import":null,"export":[],"locals":"iiiiii","instrCount":31},{"type":"i|i","import":null,"export":[],"locals":"iiiiiiiiiiii","instrCount":51},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":7},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"iiii|i","import":null,"export":[],"locals":"i","instrCount":9},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":7},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":5},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":7},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":7},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":7},{"type":"iii|","import":null,"export":[],"locals":"ii","instrCount":107},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"i","instrCount":15},{"type":"i|","import":null,"export":[],"locals":"i","instrCount":19},{"type":"ii|i","import":null,"export":[],"locals":"ii","instrCount":178},{"type":"ii|","import":null,"export":[],"locals":"iii","instrCount":106},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":50},{"type":"iii|i","import":null,"export":[],"locals":"i","instrCount":35},{"type":"iiii|","import":null,"export":[],"locals":"i","instrCount":106},{"type":"ii|","import":null,"export":[],"locals":"iiii","instrCount":294},{"type":"i|","import":null,"export":[],"locals":"iiiii","instrCount":162},{"type":"ii|","import":null,"export":[],"locals":"iiiii","instrCount":159},{"type":"|i","import":null,"export":[],"locals":"iiiiiiiiiiiii","instrCount":149},{"type":"i|","import":null,"export":[],"locals":"iiiiii","instrCount":567},{"type":"i|i","import":null,"export":[],"locals":"iiiiiiiiiiiiiiiiI","instrCount":1785},{"type":"ii|","import":null,"export":[],"locals":"iiii","instrCount":53},{"type":"ii|i","import":null,"export":[],"locals":"iiiiii","instrCount":200},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|","import":null,"export":[],"locals":"iii","instrCount":77},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":49},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":13},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":3},{"type":"iiii|i","import":null,"export":[],"locals":"iiiiii","instrCount":465},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":38},{"type":"i|","import":null,"export":[],"locals":"iii","instrCount":42},{"type":"ii|","import":null,"export":[],"locals":"iiiiI","instrCount":120},{"type":"ii|","import":null,"export":[],"locals":"iiiI","instrCount":71},{"type":"ii|","import":null,"export":[],"locals":"ii","instrCount":33},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":7},{"type":"iiiii|","import":null,"export":[],"locals":"ii","instrCount":104},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":7},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":12},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":10},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":9},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":6},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":11},{"type":"|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":5},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":7},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":5},{"type":"i|","import":null,"export":[],"locals":"","instrCount":7},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":7},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":6},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":20},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":15},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":11},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":17},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":4},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":4},{"type":"|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|i","import":null,"export":[],"locals":"i","instrCount":13},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":5},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":5},{"type":"ii|i","import":null,"export":[],"locals":"ii","instrCount":19},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":6},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":28},{"type":"iiiii|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"iiii|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"iii|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":5},{"type":"|","import":null,"export":[],"locals":"i","instrCount":26},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":5},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":7},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":26},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":54},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":54},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":54},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiii","instrCount":515},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":32},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":54},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":6},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiiiii","instrCount":329},{"type":"iiiiii|i","import":null,"export":[],"locals":"iiiiiii","instrCount":417},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":7},{"type":"iiiii|","import":null,"export":[],"locals":"i","instrCount":62},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":7},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":8},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":24},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiii","instrCount":509},{"type":"iiiii|i","import":null,"export":[],"locals":"i","instrCount":31},{"type":"ii|i","import":null,"export":[],"locals":"ii","instrCount":50},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":149},{"type":"Iii|i","import":null,"export":[],"locals":"iiIiii","instrCount":171},{"type":"ii|i","import":null,"export":[],"locals":"iii","instrCount":78},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":11},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiii","instrCount":179},{"type":"iii|i","import":null,"export":[],"locals":"iii","instrCount":100},{"type":"iii|i","import":null,"export":[],"locals":"","instrCount":5},{"type":"iii|i","import":null,"export":[],"locals":"","instrCount":5}],"globals":[{"import":null,"export":["__wasabi_global0"],"valType":"i32"},{"import":null,"export":["__data_end"],"valType":"i32"},{"import":null,"export":["__heap_base"],"valType":"i32"}],"start":null,"tables":[{"import":null,"export":["__wasabi_table0"],"refType":"funcref"}],"memories":[{"import":null,"export":["memory"]}],"tableExportNames":["__wasabi_table0"],"memoryExportNames":["memory"],"globalExportNames":["__wasabi_global0","__data_end","__heap_base"],"brTables":[{"table":[{"label":0,"location":[56,67],"ends":[["block",64,67]]},{"label":0,"location":[56,67],"ends":[["block",64,67]]},{"label":1,"location":[56,80],"ends":[["block",64,67],["block",63,80]]}],"default":{"label":0,"location":[56,67],"ends":[["block",64,67]]}},{"table":[{"label":0,"location":[6,156],"ends":[["block",153,156]]},{"label":1,"location":[6,179],"ends":[["block",153,156],["block",152,179]]},{"label":2,"location":[6,202],"ends":[["block",153,156],["block",152,179],["block",151,202]]},{"label":3,"location":[6,225],"ends":[["block",153,156],["block",152,179],["block",151,202],["block",150,225]]}],"default":{"label":9,"location":[6,523],"ends":[["block",153,156],["block",152,179],["block",151,202],["block",150,225],["block",149,248],["block",148,259],["block",147,306],["block",146,375],["block",145,463],["block",144,523]]}},{"table":[{"label":0,"location":[140,19],"ends":[["block",15,19]]},{"label":1,"location":[140,27],"ends":[["block",15,19],["block",14,27]]}],"default":{"label":3,"location":[140,57],"ends":[["block",15,19],["block",14,27],["block",13,38],["block",12,57]]}},{"table":[{"label":0,"location":[54,67],"ends":[["block",64,67]]},{"label":0,"location":[54,67],"ends":[["block",64,67]]},{"label":1,"location":[54,80],"ends":[["block",64,67],["block",63,80]]}],"default":{"label":0,"location":[54,67],"ends":[["block",64,67]]}},{"table":[{"label":2,"location":[200,403],"ends":[["block",382,386],["block",381,392],["block",380,403]]},{"label":0,"location":[200,386],"ends":[["block",382,386]]},{"label":1,"location":[200,392],"ends":[["block",382,386],["block",381,392]]},{"label":2,"location":[200,403],"ends":[["block",382,386],["block",381,392],["block",380,403]]}],"default":{"label":2,"location":[200,403],"ends":[["block",382,386],["block",381,392],["block",380,403]]}},{"table":[{"label":1,"location":[204,214],"ends":[["block",189,195],["block",188,214]]},{"label":0,"location":[204,195],"ends":[["block",189,195]]},{"label":2,"location":[204,217],"ends":[["block",189,195],["block",188,214],["block",187,217]]}],"default":{"label":1,"location":[204,214],"ends":[["block",189,195],["block",188,214]]}},{"table":[{"label":1,"location":[204,252],"ends":[["block",231,235],["block",230,252]]},{"label":0,"location":[204,235],"ends":[["block",231,235]]},{"label":2,"location":[204,255],"ends":[["block",231,235],["block",230,252],["block",229,255]]}],"default":{"label":1,"location":[204,252],"ends":[["block",231,235],["block",230,252]]}},{"table":[{"label":2,"location":[205,326],"ends":[["block",304,309],["block",303,315],["block",302,326]]},{"label":0,"location":[205,309],"ends":[["block",304,309]]},{"label":1,"location":[205,315],"ends":[["block",304,309],["block",303,315]]},{"label":0,"location":[205,309],"ends":[["block",304,309]]}],"default":{"label":2,"location":[205,326],"ends":[["block",304,309],["block",303,315],["block",302,326]]}}],"originalFunctionImportsCount":0};

Wasabi.module.lowlevelHooks = {
"begin_function_iii": function (func, instr, arg0, arg1, arg2) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1, arg2]);
},
"global_get_i": function (func, instr, index, value) {
    Wasabi.analysis.global({func, instr}, "global.get", index, value);
},
"begin_function_ii": function (func, instr, arg0, arg1) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1]);
},
"local_set_i": function (func, instr, index, value) {
    Wasabi.analysis.local({func, instr}, "local.set", index, value);
},
"begin_function_i": function (func, instr, arg0) {
    Wasabi.analysis.begin_function({func, instr}, [arg0]);
},
"i32_const": function (func, instr, value) {
    Wasabi.analysis.const_({func, instr}, "i32.const", value);
},
"local_get_i": function (func, instr, index, value) {
    Wasabi.analysis.local({func, instr}, "local.get", index, value);
},
"i32_sub": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.sub", input0, input1, result0);
},
"i32_store": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.store({func, instr}, "i32.store", {memIdx, addr}, {offset, align}, value);
},
"i32_store8": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.store({func, instr}, "i32.store8", {memIdx, addr}, {offset, align}, value);
},
"i32_load8_u": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.load({func, instr}, "i32.load8_u", {memIdx, addr}, {offset, align}, value);
},
"i32_and": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.and", input0, input1, result0);
},
"i32_load": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.load({func, instr}, "i32.load", {memIdx, addr}, {offset, align}, value);
},
"begin_function_iiii": function (func, instr, arg0, arg1, arg2, arg3) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1, arg2, arg3]);
},
"begin_block": function (func, instr, ) {
    Wasabi.analysis.begin({func, instr}, "block");
},
"global_set_i": function (func, instr, index, value) {
    Wasabi.analysis.global({func, instr}, "global.set", index, value);
},
"br_if": function (func, instr, condition, targetLabel, targetInstr) {
    Wasabi.analysis.br_if({func, instr}, {label: targetLabel, location: {func, instr: targetInstr}}, condition !== 0);
},
"end_block": function (func, instr, beginInstr) {
    Wasabi.analysis.end({func, instr}, "block", {func, instr: beginInstr});
},
"br": function (func, instr, targetLabel, targetInstr) {
    Wasabi.analysis.br({func, instr}, {label: targetLabel, location: {func, instr: targetInstr}});
},
"i32_add": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.add", input0, input1, result0);
},
"call_ii": function (func, instr, targetFunc, arg0, arg1) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1]);
},
"call_post_i": function (func, instr, result0) {
    Wasabi.analysis.call_post({func, instr}, [result0]);
},
"select_ii": function (func, instr, condition, input0, input1) {
    Wasabi.analysis.select({func, instr}, condition !== 0, input0, input1);
},
"return_i": function (func, instr, result0) {
    Wasabi.analysis.return_({func, instr}, [result0]);
},
"end_function": function (func, instr, ) {
    Wasabi.analysis.end({func, instr}, "function", {func, instr: -1});
},
"br_table": function (func, instr, tableIdx, brTablesInfoIdx) {
    Wasabi.analysis.br_table({func, instr}, Wasabi.module.info.brTables[brTablesInfoIdx].table, Wasabi.module.info.brTables[brTablesInfoIdx].default, tableIdx); Wasabi.endBrTableBlocks(brTablesInfoIdx, tableIdx, func);
},
"i32_eq": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.eq", input0, input1, result0);
},
"return": function (func, instr, ) {
    Wasabi.analysis.return_({func, instr}, []);
},
"i32_gt_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.gt_u", input0, input1, result0);
},
"i32_eqz": function (func, instr, input0, result0) {
    Wasabi.analysis.unary({func, instr}, "i32.eqz", input0, result0);
},
"call_iii": function (func, instr, targetFunc, arg0, arg1, arg2) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1, arg2]);
},
"call_post": function (func, instr, ) {
    Wasabi.analysis.call_post({func, instr}, []);
},
"call_iiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1, arg2, arg3]);
},
"i32_shl": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.shl", input0, input1, result0);
},
"i64_load": function (func, instr, memIdx, offset, align, addr, value_low, value_high) {
    Wasabi.analysis.load({func, instr}, "i64.load", {memIdx, addr}, {offset, align}, new Long(value_low, value_high));
},
"local_set_I": function (func, instr, index, value_low, value_high) {
    Wasabi.analysis.local({func, instr}, "local.set", index, new Long(value_low, value_high));
},
"local_get_I": function (func, instr, index, value_low, value_high) {
    Wasabi.analysis.local({func, instr}, "local.get", index, new Long(value_low, value_high));
},
"i64_store": function (func, instr, memIdx, offset, align, addr, value_low, value_high) {
    Wasabi.analysis.store({func, instr}, "i64.store", {memIdx, addr}, {offset, align}, new Long(value_low, value_high));
},
"call_iiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1, arg2, arg3, arg4]);
},
"i64_const": function (func, instr, value_low, value_high) {
    Wasabi.analysis.const_({func, instr}, "i64.const", new Long(value_low, value_high));
},
"begin_function_iiiiiii": function (func, instr, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1, arg2, arg3, arg4, arg5, arg6]);
},
"local_tee_i": function (func, instr, index, value) {
    Wasabi.analysis.local({func, instr}, "local.tee", index, value);
},
"i32_lt_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.lt_u", input0, input1, result0);
},
"call_iiiiiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7]);
},
"call_i": function (func, instr, targetFunc, arg0) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0]);
},
"i32_xor": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.xor", input0, input1, result0);
},
"i32_shr_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.shr_u", input0, input1, result0);
},
"unreachable": function (func, instr, ) {
    Wasabi.analysis.unreachable({func, instr}, );
},
"call": function (func, instr, targetFunc) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, []);
},
"begin_function_iiiii": function (func, instr, arg0, arg1, arg2, arg3, arg4) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1, arg2, arg3, arg4]);
},
"i32_ge_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.ge_u", input0, input1, result0);
},
"i32_or": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.or", input0, input1, result0);
},
"i32_ne": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.ne", input0, input1, result0);
},
"drop_i": function (func, instr, value) {
    Wasabi.analysis.drop({func, instr}, value);
},
"begin_function_iiiiiiii": function (func, instr, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7]);
},
"i32_div_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.div_u", input0, input1, result0);
},
"i32_le_s": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.le_s", input0, input1, result0);
},
"i32_mul": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.mul", input0, input1, result0);
},
"begin_loop": function (func, instr, ) {
    Wasabi.analysis.begin({func, instr}, "loop");
},
"i32_rem_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.rem_u", input0, input1, result0);
},
"end_loop": function (func, instr, beginInstr) {
    Wasabi.analysis.end({func, instr}, "loop", {func, instr: beginInstr});
},
"i32_rotl": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.rotl", input0, input1, result0);
},
"call_iiiiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1, arg2, arg3, arg4, arg5, arg6]);
},
"i32_le_u": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.le_u", input0, input1, result0);
},
"begin_function": function (func, instr, ) {
    Wasabi.analysis.begin_function({func, instr}, []);
},
"i32_clz": function (func, instr, input0, result0) {
    Wasabi.analysis.unary({func, instr}, "i32.clz", input0, result0);
},
"memory_grow": function (func, instr, memIdx, deltaPages, previousSizePages) {
    Wasabi.analysis.memory_grow({func, instr}, memIdx, deltaPages, previousSizePages);
},
"call_iiiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4, arg5) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [arg0, arg1, arg2, arg3, arg4, arg5]);
},
"call_indirect_ii": function (func, instr, tableIdx, elemIdx, arg0, arg1) {
    Wasabi.analysis.call_pre({func, instr}, "call_indirect", Wasabi.resolveTableIdx(tableIdx, elemIdx), [arg0, arg1], {tableIdx, elemIdx});
},
"begin_function_iiiiii": function (func, instr, arg0, arg1, arg2, arg3, arg4, arg5) {
    Wasabi.analysis.begin_function({func, instr}, [arg0, arg1, arg2, arg3, arg4, arg5]);
},
"i32_load8_s": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.load({func, instr}, "i32.load8_s", {memIdx, addr}, {offset, align}, value);
},
"i32_gt_s": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.gt_s", input0, input1, result0);
},
"begin_function_Iii": function (func, instr, arg0_low, arg0_high, arg1, arg2) {
    Wasabi.analysis.begin_function({func, instr}, [new Long(arg0_low, arg0_high), arg1, arg2]);
},
"i64_ge_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0) {
    Wasabi.analysis.binary({func, instr}, "i64.ge_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), result0);
},
"i32_lt_s": function (func, instr, input0, input1, result0) {
    Wasabi.analysis.binary({func, instr}, "i32.lt_s", input0, input1, result0);
},
"i64_div_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
    Wasabi.analysis.binary({func, instr}, "i64.div_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
},
"local_tee_I": function (func, instr, index, value_low, value_high) {
    Wasabi.analysis.local({func, instr}, "local.tee", index, new Long(value_low, value_high));
},
"i64_mul": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
    Wasabi.analysis.binary({func, instr}, "i64.mul", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
},
"i64_sub": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
    Wasabi.analysis.binary({func, instr}, "i64.sub", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
},
"i32_wrap_i64": function (func, instr, input0_low, input0_high, result0) {
    Wasabi.analysis.unary({func, instr}, "i32.wrap_i64", new Long(input0_low, input0_high), result0);
},
"call_indirect_iii": function (func, instr, tableIdx, elemIdx, arg0, arg1, arg2) {
    Wasabi.analysis.call_pre({func, instr}, "call_indirect", Wasabi.resolveTableIdx(tableIdx, elemIdx), [arg0, arg1, arg2], {tableIdx, elemIdx});
},
"i32_load16_u": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.load({func, instr}, "i32.load16_u", {memIdx, addr}, {offset, align}, value);
},
"i32_store16": function (func, instr, memIdx, offset, align, addr, value) {
    Wasabi.analysis.store({func, instr}, "i32.store16", {memIdx, addr}, {offset, align}, value);
},
"i64_gt_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0) {
    Wasabi.analysis.binary({func, instr}, "i64.gt_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), result0);
},
"i64_load32_u": function (func, instr, memIdx, offset, align, addr, value_low, value_high) {
    Wasabi.analysis.load({func, instr}, "i64.load32_u", {memIdx, addr}, {offset, align}, new Long(value_low, value_high));
},
"call_Iii": function (func, instr, targetFunc, arg0_low, arg0_high, arg1, arg2) {
    Wasabi.analysis.call_pre({func, instr}, "call", targetFunc, [new Long(arg0_low, arg0_high), arg1, arg2]);
},
"i32_ctz": function (func, instr, input0, result0) {
    Wasabi.analysis.unary({func, instr}, "i32.ctz", input0, result0);
},
};

module.exports = Wasabi;
